name: Inicio

on:
  workflow_dispatch:
  push:
    branches:
      - main  

permissions:
  contents: write

jobs:
  start:
    name: Inicio
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: validate step
        id: validacao
        run: |
          currentstep=$(cat .github/CONFIG/step.txt)
          echo "::set-output name=currentstep::$currentstep"        
      
      - name: Update Step
        if: ${{ steps.validacao.outputs.currentstep == '0' }}      
        run: |
          echo "1" > .github/CONFIG/step.txt
          git config --global user.name 'Julio Arruda'
          git config --global user.email 'julio.arruda@outlook.com'          
          git add .
          git commit -m "Atualizando Step"
          git push

      - name: Create an issue
        if: ${{ steps.validacao.outputs.currentstep == '0' }}      
        uses: actions-ecosystem/action-create-issue@v1
        with:
          github_token: ${{ secrets.ISSUE_SECRET }}
          title: Boas Vindas ao Primeiro Desafio!!!
          body: |
            ## Boas vindas a primeira parte do desafio

            Nesse desafio, nós vamos ver um pouco sobre a padronização nas mensagens de Commit para os nossos repositórios.

            Quando você está trabalhando com Git, a todo momento você precisa realizar um commit para salvar suas alterações,
            e para evitar que as pessoas usem mensagens _"sem sentido"_, surgiram convenções para ajudar na padronização, 
            como as que iremos ver neste desafio.

            :warning:
            Para começar, você pode clonar o repositório para sua máquina. Para isso, você precisa ter o 
            git cli instalado em sua máquina, caso ainda não esteja instalado em sua máquina, acesse o link:
            [https://git-scm.com/downloads](https://git-scm.com/downloads).
            :warning:

            Para essa padronização, nós temos uma estrutura base que devemos seguir, ficando no seguinte modelo:

            ```
            tipo (escopo): Assunto

            Corpo 
            
            rodapé
            ```

            Os tipos, são obrigatórios, e nós iremos ver cada um deles nas proximas partes desse desafio, já o escopo, é algo mais opcional, 
            onde você está dando um complemento extra sobre oque esse commit se refere, como por exemplo,se é sobre API, ou algum módulo especifico
            da aplicação.

            Já o assunto, é uma explicação basica sobre a alteração, que vai ser vista de bate pronto quando alguem acessar o log do Git.

            No corpo do commit, nós podemos dar uma explicação um pouco mais detalhada sobre a demanda. 

            Já no rodapé, nós podemos incluir informações relacionadas a demanda que estamos atendendo ou fechando como por exemplo:

            ```
            Close #1234
            ```

            Nessa primeira parte, vamos falar um pouco sobre um dos tipos commit, o **docs**:

            Durante nosso processo de desenvolvimento, uma coisa que é muito comum é a criação de documentações de nossos projetos, e 
            essas documentações podem ser feitas via arquivos markdown, e para identificar em nosso histórico de commits que nossa alteração
            estava relacionada a documentação, usamos o padrão **docs**.

            A estrutura, segue o seguinte modelo:
            
            ```
            docs: Alteração na sessão sobre autenticação da API

            Alteração na documentação onde é realizada a explicação sobre autenticação na API, que utiliza um Token JWT.
            Essa sessão estava pendente desde a disponibilização da API em produção

            Close #123
          
            ```

            Então, agora que você já entendeu esse padrão, que tal realizar um commit utilizando o docs?
            Vamos lá, após concluir, vamos seguir para o proximo tipo 



            ![hula_loop_octodex](https://octodex.github.com/images/hula_loop_octodex03.gif)