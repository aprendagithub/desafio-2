name: Inicio

on:
  workflow_dispatch:
  push:
    branches:
      - main  

permissions:
  contents: write

jobs:
  start:
    name: Inicio
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: validate step
        id: validacao
        run: |
          currentstep=$(cat .github/CONFIG/step.txt)
          echo "::set-output name=currentstep::$currentstep"        
      
      - name: Update Step
        if: ${{ steps.validacao.outputs.currentstep == '0' }}      
        run: |
          echo "1" > .github/CONFIG/step.txt
          git config --global user.name 'Julio Arruda'
          git config --global user.email 'julio.arruda@outlook.com'          
          git add .
          git commit -m "Atualizando Step"
          git push

      - name: Create an issue
        if: ${{ steps.validacao.outputs.currentstep == '0' }}      
        uses: actions-ecosystem/action-create-issue@v1
        with:
          github_token: ${{ secrets.ISSUE_SECRET }}
          title: Boas Vindas ao Primeiro Desafio!!!
          body: |
            ## Boas vindas a primeira parte do desafio

            Nesse desafio, nós vamos ver um pouco sobre a padronização nas mensagens de Commit para os nossos repositórios.

            Quando você está trabalhando com Git, a todo momento você precisa realizar um commit para salvar suas alterações,
            e para evitar que as pessoas usem mensagens _"sem sentido"_, surgiram convenções para ajudar na padronização, 
            como as que iremos ver neste desafio.

            :warning:
            Para começar, você pode clonar o repositório para sua máquina. Para isso, você precisa ter o 
            git cli instalado em sua máquina, caso ainda não esteja instalado em sua máquina, acesse o link:
            [https://git-scm.com/downloads](https://git-scm.com/downloads).
            :warning:

            Para essa padronização, nós temos uma estrutura base que devemos seguir, ficando no seguinte modelo:

            ```
            tipo (escopo): Assunto

            Corpo 
            
            rodapé
            ```

            Os tipos, são obrigatórios,  já o escopo, é algo mais opcional, onde você está dando um complemento extra sobre oque esse commit se refere, como por exemplo,se é sobre API, ou algum módulo especifico
            da aplicação.

            Os tipos existentes, são os seguintes:

            - feat:  usado quando estamos desenvolvendo novas features em nosso projeto;
            - fix: usado quando precisamos corrigir algum bug encontrado pelo usuário;
            - docs: usado quando estamos trabalhando em alguma documentação da aplicação;
            - style: usado para pequenos ajustes em formatação,algum ; que possa ter ficado faltando, é algo que não altera necessariamente oque já está em produção;
            - refactor: usado quando fazermos alguma refatoração de algum código que já está em produção;
            - test: usado quando estamos trabalhando nos testes, incluindo novos testes, ou refatorando já existentes;
            - chore: usado para alteração em scripts ou outros arquivos, como .gitignore por exemplo, que não afetam produção.

            Já o assunto, é uma explicação basica sobre a alteração, que vai ser vista de bate pronto quando alguem acessar o log do Git.

            No corpo do commit, nós podemos dar uma explicação um pouco mais detalhada sobre a demanda. 

            Já no rodapé, nós podemos incluir informações relacionadas a demanda que estamos atendendo ou fechando como por exemplo:

            ```
            Close #1234
            ```

            Para esse nosso desafio, vamos fazer o seguinte, você vai realizar o clone desse repositório para sua máquina, e vai realizar um commit 
            usando cada um dos tipos existentes.

            Você deve fazer cada um dos commits, de forma individual, realizando um git push após cada um para que possa ser contabilizado corretamente.
            A ordem também é de extrema importância. Você precisa seguir a ordem exata em que foi apresentada acima para que o processo funcione como deveria.

            O processo é basicamente o seguinte:

            ```
            git clone git@github.com:aprendagithub/SEU-REPOSITORIO.git
            
            cd SEU-REPOSITORIO
            ```

            Dentro da pasta você pode criar um novo arquivo, ou alterar o readme.md por exemplo, e logo em seguida executar o comando:

            ```
            git add NOME-DO-ARQUIVO

            ```

            E então, realizar o commit seguindo a seguinte estrutura (alterando o tipo que você precisar)
            
            ```
            git commit -m 'docs: Alteração na sessão sobre autenticação da API

            Alteração na documentação onde é realizada a explicação sobre autenticação na API, que utiliza um Token JWT.
            Essa sessão estava pendente desde a disponibilização da API em produção

            Close #123'
          
            ```

            Depois, você precisa enviar suas alterações para o servidor, executando o comando:
            ```
            git push
            ```

            Agora, sua alteração foi enviada para o GitHub, e se tudo foi feito corretamente, uma nova issue será criada, 
            avisando que deu tudo certo, e ai, você vai poder ir para a proxima.

            Ah, não se esqueça de fazer um **git pull** no seu repositório antes de fazer a proxima alteração,ok?

            
            Então vamos lá? Lembrando que o primeiro tipo é **feat**.



            ![hula_loop_octodex](https://octodex.github.com/images/hula_loop_octodex03.gif)